<script>
    document.addEventListener('alpine:init', () => {

    Alpine.data('handleMinicart', () => ({
        init() {
            console.log('handleMinicart init')
        },
        open: false,
        note: null,
        attributes: {},
        original_total_price: 0,
        total_price: 0,
        total_discount: 0,
        total_weight: 0.0,
        item_count: 0,
        products: [],
        requires_shipping: false,
        currency: 'EUR',
        items_subtotal_price: 0,
        cart_level_discount_applications: [],
        cartApiResponseDefault : {
            result : {},
            show : false,
            timeout : 5000,
        },
        cartApiResponse : {
            result : {},
            show : false,
            timeout : 5000,
        },

        // deprecated:
        total: {
            items: 0,
            price: 0,
            weight: 0,
            discount: 0,
        },
        _abortController : null,
        initAbortController() {
            if(this._abortController) {
                this._abortController.abort('abort previous request');
            }
            this._abortController = new AbortController()
        },
        getAbortControllerSignal() {
            return this._abortController.signal
        },
        resetAbortController() {
            this._abortController = null;
        },
        toggleMiniCart() {
            console.log('(minicart.js) toggleMiniCart called');

            LiquifyHelper.handleTriggerClick();

            this.getCart();
        },

        /**
         * Get the cart data.
         */
        getCart() {
            this.initAbortController()
            fetch(window.Shopify.routes.root + 'cart.js', {
                method: 'GET',
                signal: this.getAbortControllerSignal(),
                headers: {'Content-Type': 'application/json'},
            })
            .then(response => response.json())
            .then(data => {
                this.resetAbortController();

                this.total.items = data.item_count;

                this.products = data.items.map((item) => {
                    item.title = this.htmlspecialchars_decode(item.title)
                    return item
                })

                this.total.price = data.total_price;
                this.total.weight = data.total_weight;
                this.total.discount = data.total_discount;

                this.$dispatch('carttotalitems', data.item_count);
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        },

        /**
         * @param id
         * @param quantity
         */
        increaseCartItemQuantity(id, quantity) {
            this.updateCartItemQuantity(id, parseInt(quantity) + 1);
        },

        /**
         * @param id
         * @param quantity
         */
        decreaseCartItemQuantity(id, quantity) {
            this.updateCartItemQuantity(id, parseInt(quantity) - 1);
        },

        /**
         * Update the cart item.
         *
         * @param id
         * @param quantity
         */
        updateCartItemQuantity(id, quantity) {
            this.initAbortController();
            console.log('updateCartItemQuantity(): id, quantity: ', id, quantity);
            this.products.filter((product)  => {
                if(parseInt(product.id) === parseInt(id)) {
                    product.quantity = quantity
                }
            })
            fetch(window.Shopify.routes.root + 'cart/change.js', {
                method: 'POST',
                signal: this.getAbortControllerSignal(),
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    id: `${id}`,
                    quantity: quantity,
                }),
            })
                .then(response => response.json())
                .then(data => {
                    this.resetAbortController();
                    console.log('updateCartItemQuantity(): ', data);

                    this.$dispatch('cartupdated');
                    this.$dispatch('showcartmessage', { status: data.status, message: data.message, description: data.description });
                })
                .catch((error) => {
                    console.error('Error:', error);
                    this.$dispatch('showcartmessage', { status: error?.status, message: error, description: error });
                });
        },

        /**
         * Format monetary values.
         */
        moneyFormat(value, minor = true) {
            return LiquifyHelper.moneyFormat(value, minor)
        },

        htmlspecialchars_decode(string) {
            return LiquifyHelper.htmlspecialchars_decode(string)
        },

        /**
         * Shows the minicart api message
         * @param event
         */
        showCartMessage(event) {
            console.log("dispatched showCartMessage", event)
            if(event?.detail?.status) {
                this.cartApiResponse.result = event.detail ?? this.cartApiResponseDefault.result;
                this.cartApiResponse.show = true
                setTimeout(() =>  this.cartApiResponse =  this.cartApiResponseDefault, this.cartApiResponse.timeout ?? 5000)
            }
        },
    }))
});


</script>
<div data-hover="false" data-delay="0" li-element="mini-cart" class="nav_dropdown w-dropdown" x-cloak="" x-data="handleMinicart()" x-init="getCart()" @cartupdated.window="getCart()" @setcartitem.window="updateCartItemQuantity($event.detail.product, $event.detail.quantity)" @increasecartitem.window="increaseCartItemQuantity($event.detail.product, $event.detail.quantity)" @decreasecartitem.window="decreaseCartItemQuantity($event.detail.product, $event.detail.quantity)" @toggleminicart.window="toggleMiniCart()" @showcartmessage.window="showCartMessage"><div li-element="mini-cart-toggle" class="nav_shop-icon w-dropdown-toggle" @click="$dispatch('cartupdated.window')"><div class="icon-embed-xsmall w-embed"><svg width="100%" height="100%" viewbox="0 0 24 24" fill="none" preserveaspectratio="xMidYMid meet" aria-hidden="true" role="img"><mask id="mask0_2941_121294" style="mask-type:alpha" maskunits="userSpaceOnUse" x="0" y="0" width="24" height="24"><rect width="24" height="24" fill="#D9D9D9"></rect></mask><g mask="url(#mask0_2941_121294)"><path d="M6 22C5.45 22 4.97917 21.8042 4.5875 21.4125C4.19583 21.0208 4 20.55 4 20V8C4 7.45 4.19583 6.97917 4.5875 6.5875C4.97917 6.19583 5.45 6 6 6H8C8 4.9 8.39167 3.95833 9.175 3.175C9.95833 2.39167 10.9 2 12 2C13.1 2 14.0417 2.39167 14.825 3.175C15.6083 3.95833 16 4.9 16 6H18C18.55 6 19.0208 6.19583 19.4125 6.5875C19.8042 6.97917 20 7.45 20 8V20C20 20.55 19.8042 21.0208 19.4125 21.4125C19.0208 21.8042 18.55 22 18 22H6ZM6 20H18V8H16V10C16 10.2833 15.9042 10.5208 15.7125 10.7125C15.5208 10.9042 15.2833 11 15 11C14.7167 11 14.4792 10.9042 14.2875 10.7125C14.0958 10.5208 14 10.2833 14 10V8H10V10C10 10.2833 9.90417 10.5208 9.7125 10.7125C9.52083 10.9042 9.28333 11 9 11C8.71667 11 8.47917 10.9042 8.2875 10.7125C8.09583 10.5208 8 10.2833 8 10V8H6V20ZM10 6H14C14 5.45 13.8042 4.97917 13.4125 4.5875C13.0208 4.19583 12.55 4 12 4C11.45 4 10.9792 4.19583 10.5875 4.5875C10.1958 4.97917 10 5.45 10 6Z" fill="currentColor"></path></g></svg></div><div li-element="mini-cart-item-count" class="nav_shop-quantity" x-data="{ items: 0 }" x-text="items" @carttotalitems.window="items = event.detail">1</div></div><nav li-element="mini-cart-container" class="nav_mini-cart-holder w-dropdown-list" :class="open || 'mini-cart-closed'"><div li-element="dropdown-toggle" class="nav_mini-cart-close" data-dropdowntoggle="" @click="LiquifyHelper.triggerClick($event.target.closest('.w-dropdown').querySelector('.w-dropdown-toggle.w--open'))"></div><div class="mini-cart_component"><div li-element="mini-cart-full" class="mini-cart_full" :style="total.items < 1 && { display: 'none' }"><div class="mini-cart_header"><div class="heading-style-h3">Cart</div><div li-element="dropdown-toggle" class="mini-cart_close w-embed" data-dropdowntoggle="" @click="LiquifyHelper.triggerClick($event.target.closest('.w-dropdown').querySelector('.w-dropdown-toggle.w--open'))"><svg width="15" height="15" viewbox="0 0 15 15" fill="none"><path d="M1.84775 14.178L0.447754 12.778L6.04775 7.17798L0.447754 1.57798L1.84775 0.177979L7.44775 5.77798L13.0478 0.177979L14.4478 1.57798L8.84775 7.17798L14.4478 12.778L13.0478 14.178L7.44775 8.57798L1.84775 14.178Z" fill="currentColor"></path></svg></div></div><div class="mini-cart_line-item no-scrollbar"><ul role="list" class="mini-cart_line-item_list w-list-unstyled"><template x-for="product in products" :key="product.key">
    <li li-element="mini-cart-item" class="mini-cart_line-item_item" x-init="getCart()"><img src="../images/placholder-3.svg" loading="lazy" alt="" class="mini-cart_line-item_img" x-bind:src="product.image">
<div class="mini-cart_line-item_product-info"><div li-js-object="product.title" class="text-size-regular text-weight-bold" x-text="product.title">Product Title</div><div class="mini-cart_line-item_price"><div li-js-price="product.price" class="text-size-small" x-text="moneyFormat(product.price)">14,99 $</div><template x-if="product.price < product.original_price">
            <div li-js-if="product.price < product.original_price">
        <div li-js-price="product.original_price" class="text-size-small text-style-strikethrough text-style-muted" x-text="moneyFormat(product.original_price)">14,99 $</div>        </div>
    </template>
</div><div class="mini-cart_line-item_quantity"><a li-element="mini-cart-item-decrease" href="#" class="mini-cart_line-item_quantity-adjust" :productprop="product" @click="$dispatch('decreasecartitem', { product: product.id, quantity: product.quantity, action: 'decrease' })">-</a><input li-element="mini-cart-item-quantity" class="mini-cart_line-item_quantity-adjust" value="1" :productprop="product" @blur="$dispatch('setcartitem', { product: product.id, quantity: product.quantity })" x-model="product.quantity">
<a li-element="mini-cart-item-increase" href="#" class="mini-cart_line-item_quantity-adjust" :productprop="product" @click="$dispatch('increasecartitem', { product: product.id, quantity: product.quantity, action: 'increase' })">+</a></div><div li-element="mini-cart-item-remove" class="text-size-tiny text-color-grey text-style-link" :productprop="product" @click="$dispatch('setcartitem', { product: product.id, quantity: 0 })">Remove</div></div></li></template>
</ul></div><div class="mini-cart_footer"><div class="mini-cart_footer_total"><div class="text-size-regular text-weight-bold">Subtotal</div><div><div li-js-price="total.price" class="text-size-regular text-weight-bold" x-text="moneyFormat(total.price)">14,99 $</div><template x-if="total.price < original_total_price">
            <div li-js-if="total.price < original_total_price">
        <div li-js-price="original_total_price" class="text-size-regular text-weight-bold text-style-strikethrough text-style-muted" x-text="moneyFormat(original_total_price)">14,99 $</div>        </div>
    </template>
</div></div><div li-element="mini-cart-api-response" class="mini-cart_footer-message hide"><div class="mini-cart_footer-message-item"><div class="text-size-regular text-weight-bold">Message</div><div li-js-object="cartApiResponse?.result?.message" class="text-size-regular text-weight-bold" x-text="cartApiResponse?.result?.message">14,99 $</div></div></div><a x-bind:href="'/checkout'" href="#" class="button w-button">Checkout</a><a li-object:href="routes.cart_url" href="{{ routes.cart_url }}" class="button is-secondary w-button">Cart</a></div></div><div li-cloak="hide" li-element="mini-cart-empty" :style="total.items && { display: 'none' }"><div class="mini-cart_header"><div class="heading-style-h3">Cart</div><div li-mini-cart-toggle="" class="mini-cart_close w-embed" @click="$dispatch('cartupdated.window')"><svg width="15" height="15" viewbox="0 0 15 15" fill="none"><path d="M1.84775 14.178L0.447754 12.778L6.04775 7.17798L0.447754 1.57798L1.84775 0.177979L7.44775 5.77798L13.0478 0.177979L14.4478 1.57798L8.84775 7.17798L14.4478 12.778L13.0478 14.178L7.44775 8.57798L1.84775 14.178Z" fill="currentColor"></path></svg></div></div><div class="mini-cart_empty"><div class="text-size-regular">No Products selected</div></div></div></div></nav></div>
